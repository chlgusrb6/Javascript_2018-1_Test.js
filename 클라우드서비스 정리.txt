<Git hub>

git init
git remote add origin "--"
git add -all
git commit -m "--"
git push -u origin master

-m 은 메세지
-u 은 업데이트
master = 브렌치 이름 사용자라고 보면됨.


[GitHub에 Source Code 저장하기]

- Source code가 있는 folder로 이동한 후, 아래 과정을 차례로 실행

git init
git remote add origin <repository location>
git add --all
git commit -m "first commit"
git push -u origin master

[GitHub에서 Source Code 가져오기]

- Source code를 저장할 folder를 먼저 만들어 그 folder로 이동한 후, 아래 과정을 차례로 실행

git init
git remote add origin <repository location>
git fetch --all
git checkout -t remotes/origin/master

<Javascript>

var myHeading = document.querySelector('h1');
h1 을 가져오는것 html 파일안에 h1

alert(); 웹페이지 시작시 경고메세지 출력 명령문

document.querySelector('html').onclick = function (){}
여기서 보면 function 에 이름을 정의하지않고 default function 을 인정해준다 자바스크립트는

객체 <-> 주체
객체 : object 내가 원하는 일을할 코드 집합체
주체 : you 너 말그대로 직접 코딩
객체 안에 함수라는것이 존재한다. (함수 function)

변수 선언
•선언: var a = 10;  // a가 두 번 선언되어도 문제 없음
•엄격한 선언: let a = 10;  // a가 두 번 선언되면 error (중간 변경 가능)
•상수 선언: const a = 10;  // a에 값이 다시 할당되면 error (중간 변경도 불가)

•Function 내에서 선언된 변수는 function 범위 내에서 항상 접근 가능, Java와 다르게 {...} 범위가 아닌 function 범위가 유효 범위가 됨
function 밖에서 function 안에 선언된 변수를 호출하면 사용이 불가능하다 -> 유효범위가 존재하기 때문에!

function fun(){
          var a = 10;
          for (var i = 0; i < 10; i ++){
              a += 10;
              var b = 20;
          }
          alert(a);
          alert(b);
      }
      let b = 10;
      fun();
      alert(b);
이 코드에서 함수안에선 b가 20이고 함수밖에서 b호출한것은 10이 된다


•변수가 null인지 비교: var a;  a == null;
•변수는 member(property)를 동적으로 추가할 수 있음: var a;  a.x = 10;    // 오동작
•= new와 =의 차이
◦= new는 prototype 이용해 새롭게 객체를 생성
◦=는 reference로 접근

var a = 'abc';
      var b = a.toLocaleUpperCase();
      var size = b.length;
    
      alert(b + " with size = " + size);
대문자 변경과 텍스트 사이즈 측정


var a = {x:10 , y:20, z:30};
      var c = new Object();
      var d = {};
      a.a='abc';
      delete a.x;
      for( key in a ){
          document.write(key + ' = ' + a[key] + '<br>');
      }
      alert(this.a.a);

다양한접근법